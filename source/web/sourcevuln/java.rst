java源码审计
========================================

常用思路
----------------------------------------
+ 接口排查
+ 危险方法溯源
+ 功能点定向审计
+ 第三方组件，中间件NDay
+ 补丁比对
+ 黑/白盒测试
+ 代码静态扫描+人工研判
+ 开发框架安全审计

表达式注入
----------------------------------------

EL表达式
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ 获取数据：可以从JSP四大作用域（page，request，session，application）中获取数据。
+ 执行运算
+ 获取web开发常用对象：EL表达式内置了11个隐式对象
+ 调用Java方法

基础语法
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ 获取对象属性：``${User[data]}``

示例
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ CVE-2011-2730：Spring标签EL表达式漏洞
+ CVE-2018-1273：Spring Data Commons远程代码执行漏洞

JWT Token猜解
----------------------------------------

反序列化漏洞
----------------------------------------

必要条件
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ 程序中存在一条可以产生安全问题的利用链，如远程代码执行
+ 触发点：反序列化过程是一个正常的业务需求，当程序中的某处触发点在还原对象的过程中，能够成功的执行构造出来的利用链，则会成为反序列化漏洞的触发点。

拓展
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ RMI
    - 在网络传输过程中，RMI对象是通过序列化方式进行编码传输的，意味着RMI在接收到经过序列化编码的对象后会进行反序列化，因此可以通过RMI服务作为反序列化利用链的触发点。
+ JNDI
    - 在程序通过JNDI获取外部远程对象过程中，程序被控制访问恶意的服务地址（例如指向恶意的RMI服务地址），并加载和实例化恶意对象时，将会造成JNDI注入。

反序列化示例
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ Apache Commons Collections反序列化漏洞
+ FastJson反序列化漏洞