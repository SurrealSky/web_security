概述
========================================

漏洞分类
----------------------------------------

基于利用位置的分类
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- 本地漏洞
	+ 需要操作系统级的有效帐号登录到本地才能利用的漏洞，主要构成为权限提升类漏洞，即把自身的执行权限从普通用户级别提升到管理员级别。
- 远程漏洞
	+ 无需系统级的帐号验证即可通过网络访问目标进行利用，这里强调的是系统级帐号，如果漏洞利用需要诸如FTP 用户这样应用级的帐号要求也算是远程漏洞。
	
基于威胁类型的分类
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- 获取控制
	+ 可以导致劫持程序执行流程，转向执行攻击者指定的任意指令或命令，控制应用系统或操作系统。威胁最大，同时影响系统的机密性、完整性，甚至在需要的时候可以影响可用性。
	+ 主要来源：内存破坏类、CGI 类漏洞
- 获取信息
	+ 可以导致劫持程序访问预期外的资源并泄露给攻击者，影响系统的机密性。
	+ 主要来源：输入验证类、配置错误类漏洞。
- 拒绝服务
	+ 可以导致目标应用或系统暂时或永远性地失去响应正常服务的能力，影响系统的可用性。
	+ 主要来源：内存破坏类、意外处理错误处理类漏洞。
	
基于技术类型的分类
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- 内存破坏类
	+ 此类漏洞的共同特征是由于某种形式的非预期的内存越界访问（读、写或兼而有之），可控程度较好的情况下可执行攻击者指定的任意指令，其他的大多数情况下会导致拒绝服务或信息泄露。
	+ 主要分类：栈缓冲区溢出，堆缓冲区溢出，静态数据区溢出，格式串问题，越界内存访问，释放后重用，二次释放栈缓冲区溢出
- 逻辑错误类
	+ 涉及安全检查的实现逻辑上存在的问题，导致设计的安全机制被绕过。
- 输入验证类
	+ 漏洞来源都是由于对来自用户输入没有做充分的检查过滤就用于后续操作，绝大部分的CGI漏洞属于此类。
	+ 主要分类：SQL注入，跨站脚本执行，远程或本地文件包含，命令注入，目录遍历。
- 设计错误类
	+ 系统设计上对安全机制的考虑不足导致的在设计阶段就已经引入的安全漏洞。
- 配置错误类
	+ 系统运维过程中默认不安全的配置状态，大多涉及访问验证的方面。
