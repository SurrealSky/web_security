思路和技巧
========================================

文件解析漏洞
----------------------------------------
+ 工程文件
	- 恶意工程文件
		工程文件中是否含有js，py脚本等
	- zip slip漏洞
	- 序列化漏洞
		很难遇到。
+ 其它文件
	- 图片，pdf等
+ Fuzz
	- afl
	- peach

通信协议漏洞
----------------------------------------
+ 未授权漏洞
	- 文件读写
	- 命令执行

软件程序分析
----------------------------------------
+ DLL劫持漏洞
	- 分类
		+ 针对应用程序安装目录的 DLL 劫持
			在查找 DLL 时应用程序本身所在的目录都是最先被搜索的。因此如果能够放一个恶意的 DLL 文件到程序的安装目录，就可以利用 DLL 劫持漏洞来执行代码。
		+ 针对文件关联的 DLL 劫持
			当在资源管理器中打开某种特定类型的文件时，操作系统会自动创建一个进程来处理这个文件，进程对应的程序就是该文件类型关联的默认处理程序，进程的当前目录就是被打开文件所在的目录。
		+ 针对安装程序的 DLL 劫持
			与 针对应用程序安装目录的DLL劫持 比较类似。
	- 挖掘思路
		+ Process Monitor工具
			::
				
				Path ends with .dll
				Result is NAME NOT FOUND
				Process Name contains 进程名称
				打开exe或者使用某些功能时，进行如上过滤，观察输出。
		+ AheadLib
			用于生成劫持dll文件的CPP源码文件，使用VS编译生成劫持dll。
	- 提权
		如果系统服务存在dll劫持，会造成提权漏洞。
+ 升级漏洞
	采用不安全的HTTP通信协议与服务器交互，并未对服务器返回的新版升级程序文件进行任何校验，攻击者可以利用中间人技术，通过篡改网络数据包中的更新配置内容，使受害主机下载任意恶意文件并自动触发，从而达到全面控制客户端的攻击效果。
+ 逆向分析
	使用IDA或OD静态动态调试分析，结合IDAPython脚本进行审计。
+ 危险函数检测
	- 常见危险函数
		::
		
			strcpy
	- 动态插桩检测
		- 使用frida hook危险函数，观察输入数据是否可控。
	- IDA插件静态检测
		- https://github.com/Accenture/VulFi

windows驱动漏洞挖掘
----------------------------------------
+ 确定驱动设备名称
+ 确定有效的IOCTL CODE
	- 监控正常交互
	- 暴力破解
	- 逆向分析
		::
		
			分析DriverEntry入口函数中DriverObject->MajorFunction[0xE]的指针值（IRP_MJ_DEVICE_CONTROL），
			因为在该指针处定义的函数使用了DeviceIoControl及其包含的I/O控制代码（IOCTL）来处理从用户模式发出的请求。
			或
			寻找对IofCompleteRequest的调用，然后从调用向上滚动，以查找DWORD比较。
			或
			搜索Text，"jumptable"
+ IOCTL测试
+ ioctl FUZZ