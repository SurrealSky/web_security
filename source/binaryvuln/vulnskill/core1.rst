核心技术-模糊测试
========================================

概述
----------------------------------------
模糊测试（fuzzing）是一种通过向程序提供非预期的输入并监控输出中的异常来发现软件中的故障的方法。

分类
----------------------------------------
+ 基于变异的模糊测试器
	- 通过对已有的数据样本进行变异来创建测试用例
+ 基于生成的模糊测试器
	- 为被测试系统使用的协议或文件格式建模，基于模型生成输入并据此创建测试用例。
	
缺点
----------------------------------------
+ 具有较强的盲目性
	- 即使熟悉协议格式，依然没有解决测试用例路径重复的问题，导致效率较低
+ 测试用例冗余度大
	- 由于很多测试用例通过随机策略产生，导致会产生重复或相似的测试用例
+ 对关联字段的针对性不强
	- 大多数时候只是对多个元素进行数据的随机生成或变异，缺乏对协议关联字段的针对性
	
AFL fuzzer
----------------------------------------

AFL概述
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AFL全称是American Fuzzy Lop，由Google安全工程师Michał Zalewski开发的一款开源fuzzing测试工具，原理是在相关代码处插桩，因此AFL主要用于对 **开源软件** 进行测试。当然配合QEMU等工具，也可对 **闭源二进制代码** 进行fuzzing，但执行效率会受到影响。
	
DynamoRIO
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ 概述
	DynamoRIO是一款流行的动态二进制插桩工具，工作于操作系统与应用程序之间，通过将二进制程序的代码拷贝到代码缓存的方式模拟目标程序的执行。在动态模拟执行的过程中，可以根据分析需求，对二进制程序的运行状态进行监控与修改。
+ 基本组成
	+ DynamoRIO：负责解释并执行目标程序；提供丰富的跨平台API接口
	+ Client ：通过API自定义分析操作来扩展DynamoRIO
	+ DynamoRIO Extensions：主要指drmgr，drsyms，drwrap等官方提供的扩展接口
+ 事件
	+ 应用程序事件：应用程序在动态执行时的事件，包括进程创建，模块加载，系统调用等
	+ DynamoRIO事件：包括基本快、轨迹流的创建等
	+ 事件回调函数的注册：dr_register_xx_event,dr_ungister_xx_event等

代码分析
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

二次开发
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

libFuzzer
----------------------------------------

libFuzzer概述
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
libFuzzer需要和要被测试的库链接在一起，通过一个模糊测试入口点（目标函数），把测试用例喂给要被测试的 **库函数（开源或闭源）** 。fuzzer会跟踪哪些代码区域已经测试过，然后在输入数据的语料库上进行变异，来使代码覆盖率最大化。代码覆盖率的信息由 LLVM 的SanitizerCoverage 插桩提供。

libfuzzer安装
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ 官网：https://llvm.org/docs/LibFuzzer.html

libFuzzer示例
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
``clang++ -g -std=c++11 -fsanitize=address,fuzzer first_fuzzer.cc ./libFuzzer/libFuzzer.a -o first_fuzzer``