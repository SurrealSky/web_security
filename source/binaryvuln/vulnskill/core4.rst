核心技术-污点分析
========================================

概述
----------------------------------------

基本原理
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ 抽象成一个三元组<sources,sinks,sanitizers>的形式
+ source 即污点源，代表直接引入不受信任的数据或者机密数据到系统中
+ sink 即污点汇聚点，代表直接产生安全敏感操作(违反数据完整性)或者泄露隐私数据到外界(违反数据保密性)
+ sanitizer 即无害化处理，代表通过数据加密或者移除危害操作等手段使数据传播不再对软件系统的信息安全产生危害

关键技术
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ 识别污点源（Source点）并对污点信息进行标记(根据所分析的系统的不同使用定制的识别策略)
	- 不同的应用程序中识别污点源和汇聚点的方法各不相同，缺乏通用方法。
	- 方法分类
		+ 使用启发式的策略进行标记,例如把来自程序外部输入的数据统称为“污点”数据,保守地认为这些数据有可能包含恶意的攻击数据(如 PHP Aspis)；
		+ 根据具体应用程序调用的 API 或者重要的数据类型,手工标记源和汇聚点(如 DroidSafe2)；
		+ 使用统计或机器学习技术自动地识别和标记污点源及汇聚点3。
+ 污点传播分析(利用特定的规则跟踪分析污点信息在程序中的传播过程)
	- 方法分类
		+ 显示流分析：分析污点标记如何随程序中变量之间的数据依赖关系传播
		+ 隐式流分析：分析污点标记如何随程序中变量之间的控制依赖关系传播,也就是分析污点标记如何从条件指令传播到其所控制的语句。
+ 漏洞检测、无害处理(在一些关键的程序点（Sink点）检测关键的操作是否会受到污点信息的影响)
	- 无害处理：指污点数据经过该模块的处理后,数据本身不再携带敏感信息或者针对该数据的操作不会再对系统产生危害。

污点分析方法
----------------------------------------

分类
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ 静态污点分析技术
	- 通过词法和语法分析等方法离线分析变量间数据和控制依赖关系，以检测污点数据能否从污点源传播到污点汇聚点，在此过程中既不运行目标程序，也无需修改代码。静态污点分析的对象是程序代码或中间表示（Intermediate Representation， IR）
+ 动态污点分析技术
	- 在目标程序运行过程中，通过实时跟踪监控并记录程序变量、寄存器和内存等的值，确定污点数据能否从污点源传播到污点汇聚点。动态污点分析能够比较准确地获得程序执行过程中各变量和存储单元的状态，有效提高污点分析的精确度。

实现方式
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ 基于硬件
	- 核心思想是对寄存器、缓存和内存等硬件结构进行重新设计，增加相应的污点信息标志位以实现污点信息的存储、传播和检测等功能。
+ 基于软件
	- 根据分析对象的不同还可细分为基于操作系统和基于应用程序的污点分析，其核心思想是将操作系统（如进程与线程、内存、文件等）或应用程序（如数据库中的文件等）中的相关资源进行标记，并在此基础上进行污点分析。基于软件的污点分析无需改变底层硬件，主要通过修改程序代码的方式实现污点信息的存储与传播。
+ 基于虚拟环境
	- 核心思想是在虚拟环境中增加污点分析模块，使污点分析模块和被分析的目标程序运行在不同环境中。其中，分析模块运行于虚拟机监控层，目标程序处于目标机操作系统层，分析模块不影响目标程序的运行，记录的污点信息更准确。
+ 基于代码
	- 根据分析对象的不同也可以被细分为对程序源码进行污点分析和对二进制代码进行污点分析两种。
	- 基于代码的污点分析工具基本都采用了程序切片技术，使其对程序的理解和分析更为精确。程序切片是指能够影响程序某行的某个变量值的部分语句和判定表达式的集合。
	- 对程序源码进行污点分析是实现一个带有安全标签的类型系统，在编译过程中读取程序源码的安全标签，以检查是否存在违反信息流策略的情况。静态污点分析常采用这种方式。
	- 对二进制代码进行污点分析是在二进制代码中插入污点跟踪代码，以获取程序执行时的污点传播情况。动态污点分析常采用这种方式。

应用领域
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ 隐私数据泄露检测
+ 逆向分析
+ 漏洞探测

相关项目
----------------------------------------