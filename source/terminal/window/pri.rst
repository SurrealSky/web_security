权限机制
========================================

核心内容
----------------------------------------
**UAC** 通过动态管理 **访问令牌** 的权限级别，来控制用户和程序对受 **NTFS权限** 保护的资源的访问。

令牌
----------------------------------------

基础
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
一个访问令牌是附着在每一个进程或线程上的一个数据结构，它包含了该进程的安全上下文（Security Context）。你可以把它想象成程序的 “身份证” 或 “通行证”。

内容
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ 用户身份 (SID)：代表运行此进程的用户。
+ 所属组 (Group SIDs)：代表该用户所属的组（如Administrators组、Users组）。
+ 特权 (Privileges)：一系列特定的系统权限（如修改系统时间、加载设备驱动等）。
+ 完整性级别 (Integrity Level)：一个核心的安全级别（如低、中、高、系统），用于强制完整性控制（MIC），决定了一个进程可以访问哪些资源（例如，中完整性级别的进程不能向高完整性级别的进程写入数据）。

类型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ 主令牌 (Primary Token)：与用户登录会话关联，代表用户本身的权限。
+ 模拟令牌 (Impersonation Token)：允许一个进程（通常是服务）临时采用另一个用户（通常是客户端）的安全上下文行事。

UAC
----------------------------------------

介绍
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
UAC是一种权限管理机制。它的主要目标是让用户即使在管理员账户下，也以标准用户的权限运行，从而减少恶意软件和意外操作对系统的破坏。

修改方法
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ 粗力度
	运行，输入msconfig，工具，更改UAC设置
+ 细粒度
	组策略修改UAC：运行->gpedit.msc->windows设置->安全设置->本地策略->安全选项

工作原理
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ 登录时拆分令牌：当一个属于Administrators组的用户登录时，Windows会创建两个访问令牌
	- 完整的管理员令牌：包含所有管理员权限。
	- 过滤后的标准用户令牌：移除了管理员权限和高级别完整性等级（降为中等级别）。
+ 默认使用低权限令牌：用户登录后启动的所有程序默认都使用这个“过滤后的”标准用户令牌运行。
	- 通过修改组策略可以默认运行所有程序都是管理员令牌。
		+ 管理员内置管理员帐户的审批模式：控制内置管理员帐户管理员审批模式的行为。
			- 已启用：内置管理员帐户使用管理员审批模式。默认情况下，任何需要特权提升的作都提示用户证明该作。
			- 禁用 (默认) ：内置管理员帐户以完全管理权限运行所有应用程序。、
	- 禁用UAC
		+ 在管理员审批模式下运行所有管理员：控制所有 UAC 策略设置的行为。
			- 已启用 (默认) ：已启用管理员审批模式。 必须启用此策略并配置相关的 UAC 设置。 该策略允许内置管理员帐户和管理员组的成员在管理员审批模式下运行。
			- 已禁用：禁用管理员审批模式和所有相关 UAC 策略设置。
	- 其它
		+  管理员审批模式下管理员的提升提示行为：控制管理员提升提示的行为。
			- 提升而不提示：允许特权帐户执行需要提升的作，而无需同意或凭据。 仅在受约束最严重的环境中使用此选项。
			- 在安全桌面上提示输入凭据：当作需要特权提升时，系统会在安全桌面上提示用户输入特权用户名和密码。 如果用户输入了有效的凭据，则作会以用户的最高可用权限继续执行。
			- 安全桌面上的同意提示：当作需要特权提升时，系统会提示用户在安全桌面上选择“允许”或“拒绝”。 如果用户选择“允许”，则作会以用户的最高可用权限继续执行。
			- 提示输入凭据：当作需要特权提升时，系统会提示用户输入管理用户名和密码。 如果用户输入了有效的凭据，则作将继续具有适用的权限。
			- 同意提示：当作需要特权提升时，系统会提示用户选择“允许”或“拒绝”。 如果用户选择“允许”，则作会以用户的最高可用权限继续执行。
			- 非 Windows 二进制文件的同意提示 (默认) ：当非Microsoft应用程序的作需要特权提升时，系统会在安全桌面上提示用户选择“允许”或“拒绝”。 如果用户选择“允许”，则作会以用户的最高可用权限继续执行。

+ 权限提升请求：当某个操作或程序需要更高权限时（如修改系统设置、安装软件），UAC会弹出提示框，请求用户批准。用户批准后，该程序才会使用之前创建的“完整的管理员令牌”来运行。


NTFS文件系统
----------------------------------------
Windows的权限管理主要依赖于NTFS文件系统，通过访问控制列表（ACL）来控制用户和组对文件、文件夹、注册表键等对象的访问权限。ACL由多个访问控制条目（ACE，Access Control Entry）组成，每个ACE定义了一个用户或组的权限规则。

ACL与ACE
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- 访问控制列表（ACL）
	+ DACL（Discretionary Access Control List）：由对象所有者或管理员设置，控制用户或组的访问权限。
	+ SACL（System Access Control List）：用于审计，记录对对象的访问尝试。
- 访问控制条目（ACE）
	+ ACL中的每个条目，指定一个用户或组的权限（如读取、写入、执行等）以及继承规则。

NTFS权限类型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- 简单权限（Simple Rights）
	- F：完全控制（Full Access）
	- M：修改（Modify，包含创建、删除、读写）
	- RX：读取和执行（Read and Execute）
	- R：只读（Read-only）
	- W：只写（Write-only）
	- D：删除（Delete）
	- N：无权限（No Access）

- 特定权限（Specific Rights）
	- DE：删除
	- RC：读取控制
	- WDAC：写入DAC（修改权限）
	- WO：写入所有者
	- S：同步
	- AS：访问系统安全
	- MA：最大允许
	- GR：通用读取
	- GW：通用写入
	- GE：通用执行
	- GA：通用全部
	- RD：读取数据/列出目录
	- WD：写入数据/添加文件
	- AD：追加数据/添加子目录
	- REA：读取扩展属性
	- WEA：写入扩展属性
	- X：执行/遍历
	- DC：删除子项
	- RA：读取属性
	- WA：写入属性

继承与权限传播
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- 在NTFS中，权限通常从父对象（如文件夹）继承到子对象（如文件或子文件夹）。继承规则包括：
	+ OI)：对象继承（Object Inherit），适用于文件。
	+ (CI)：容器继承（Container Inherit），适用于文件夹。
	+ (IO)：仅继承（Inherit Only），权限仅应用于子对象，不影响当前对象。
	+ (NP)：不传播继承（No Propagate Inherit），权限不传播到更深的子对象。
	+ (I)：从父对象继承的权限（Inherited）。
- 例如，BUILTIN\Administrators:(OI)(CI)F表示管理员组对文件夹及其子文件夹和文件具有完全控制权限。

所有权与权限覆盖
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- 文件或文件夹的所有者始终具有完全控制权限，可以覆盖ACL设置。
- 默认情况下，创建文件的用户成为其所有者。管理员可以通过takeown命令或icacls的/setowner选项更改所有者。

完整性级别（Integrity Levels）
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Windows还使用完整性级别（IL，Integrity Level）来保护系统资源。完整性级别包括低（Low）、中（Medium）、高（High）等。
- 即使用户具有 **完全控制权限** ，如果其进程的 **完整性级别低于对象的完整性级别，访问仍可能被拒绝** 。
- icacls支持通过/setintegritylevel选项设置完整性级别。

icacls 命令示例
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
::

	icacls "C:\demo\example"
	输出：
	C:\demo\example BUILTIN\Administrators:(OI)(CI)(F)
				NT AUTHORITY\SYSTEM:(OI)(CI)(F)
				BUILTIN\Users:(OI)(CI)(RX)
	BUILTIN\Administrators:(OI)(CI)(F)：管理员组对文件夹及其子对象具有完全控制权限。
	NT AUTHORITY\SYSTEM:(OI)(CI)(F)：系统账户具有完全控制权限。
	BUILTIN\Users:(OI)(CI)(RX)：用户组具有读取和执行权限。

三者之间的关系与协作流程
------------------------------------------

一个标准用户尝试安装软件
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ 初始状态：
	- 用户Alice是Administrators组的成员。
	- 她登录后，由于UAC的作用，她拿到的是一个标准用户权限的访问令牌。
	- 她启动的记事本、浏览器等程序都继承了这个低权限令牌。
+ 触发操作：
	- Alice双击了一个软件的安装程序setup.exe。
+ UAC介入
	- setup.exe启动时，系统识别到它的程序清单（manifest）中标记了requireAdministrator，或者它试图执行需要管理员权限的操作。
	- UAC机制被触发，弹出蓝色的确认对话框，询问用户是否允许此程序对设备进行更改。
+ 令牌提升：
	+ 如果Alice点击“是”，Windows会丢弃当前进程的“标准用户令牌”。
	+ 系统会取出在登录时创建的那个完整的管理员令牌，并用它来重新启动这个setup.exe进程。
+ 访问资源：
	+ 现在，setup.exe进程携带的是高完整性级别和管理员权限的访问令牌。
	+ 该进程开始工作，尝试向C:\Program Files\（一个受NTFS权限保护的目录）写入文件。
+ NTFS权限检查：
	- 系统检查C:\Program Files\的NTFS权限。通常，该文件夹的权限设置是：
		+ Administrators组：拥有完全控制权限。
		+ Users组：通常只有读取和执行权限。
	- 系统将setup.exe进程令牌中的SID（包含Administrators组SID）与上述权限规则进行比对。
	- 结果：匹配成功！因为进程令牌表明用户属于Administrators组，而该组拥有“完全控制”权，因此写入操作被允许。
+ 最终结果：软件成功安装。


