底层软件
========================================

分析视角
----------------------------------------
- 高阶视角
	- 程序结构
		模块（动态库，静态库），公共代码构造（过程，对象）。
	- 数据管理
		变量，用户自定义的数据结构，列表（数组，链表，树等）。
	- 控制流
		条件块，切换块，循环等。
	- 高级语言
		C语言，C++语言，JAVA语言，C#语言。

- 低阶视角
	- 数据管理
		寄存器，堆栈，堆，可执行数据区（全局变量，预初始化数据区域等）。
	- 控制流
		特定平台与特定语言相关（或者说与特定平台下的编译器相关）。

汇编语言
----------------------------------------

CPU
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- 指令集架构(ISA)
- 机器码
- 汇编语言
- CPU寄存器
- ...

机器码与汇编指令
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	|asm1|

关系
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	|asm2|

编译器与编译基础
----------------------------------------
	|asm3|

执行环境
----------------------------------------

基础
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ 分类
	- CLR
		+ 公共语言运行时CLR（运行Microsoft.Net应用程序）
	- WinRT
	- JVM
		运行JAVA程序
+ 特点
	- 优点：平台独立，增强的功能（垃圾回收，运行时类型安全，内存安全访问）,可移植
	- 解释器（虚拟机的实现方法）：主要缺点性能缺失。
	- 逆向策略：字节码->高效的反编译器->高级语言表示。
	- 使用混淆器

CLR
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ 基础
	- 即公共语言运行时（Common Language Runtime）,是.net虚拟机。
	- 实际运行的是一种字节码形态的 **中间语言** (MISL)。
+ 工作原理
	- 如下图
		|CLR|
	- 将源代码编译成托管代码
		::
		
			 托管模块是标准的Windows可移植执行体（PE），是受管制的代码，由公共语言运行库环境（而不是直接由操作系统）执行的代码。
			 其主要由四个部分组分组成。
			 1.PE32（32位）或PE32+（64位）头
			 2.CLR头:包含使这个模块成为一个托管模块的信息。
			 3.元数据表：一种表描述源代码中定义的类型和成员，另一种表描述源代码引用的类型和成员。
			 4.IL代码：编译器编译源代码时生成的代码。在运行时，CLR将IL编译成本地CPU指令。
	- 将托管模块合并成程序集
		::
		
			CLR实际不和托管模块工作，它和程序集工作。
			程序集（Assembly）是一个抽象概念，在CLR的世界里，程序集就相当于组件。
			1.程序集是一个或多个模块/资源文件的逻辑性分组
			2.程序集是重用、安全性以及版本控制的最小单元
	- 加载运行时程序
		::
		
			Windows 检查好EXE文件头，决定是创建32位还是64位进程之后，会在进程的地址空间中加载 MSCorEE.dll。
			进程的主线程调用MSCorEE.dll中定义的方法初始化 CLR，加载 EXE 程序集，然后调用其入口方法（Main）。
			随即，托管的应用程序将启动并运行。
	- 执行程序集中的代码
		::
		
			CLR在这里还需要对已经编译好的IL再次编译，这个过程是由JIT(Just In Time)编译器完成的,称作即时编译。
			当第一次执行某个函数时，MSCorEE.dll 的JITCompiler函数会从程序集的元数据中获取该方法和方法的IL，
			并且分配一块内存地址，然后将IL编译成的本地代码放入这块内存，然后执行内存中的本地代码。

WinRT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ Windows Runtime,简称WinRT. WinRT是一个操作系统模块，在Win 8种首次引入。
+ 运行在用户态，介于Win32的上层和应用程序的下层。
+ WinRT在二进制模型上基于经典的COM。WinRT和CLR互不依赖，WinRT可以被CLR使用。


.. |basic1| image:: ../../images/basic1.png
.. |asm1| image:: ../../images/asm1.png
.. |asm2| image:: ../../images/asm2.png
.. |asm3| image:: ../../images/asm3.png
.. |CLR| image:: ../../images/CLR.png