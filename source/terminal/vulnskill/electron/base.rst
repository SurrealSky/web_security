基础
========================================

概述
----------------------------------------
+ electron.js是一个运行时框架，使用web技术来创建跨平台原生桌面应用的框架。
+ electron负责硬件部分，Chromium负责页面UI渲染，Node.js负责业务逻辑，Native API则提供原生能力和跨平台。

特点
----------------------------------------
+ 摆脱了不同浏览器之间的差异和版本的限制，可以开发跨平台的桌面应用。
+ 通过内置Node.js提供原生系统的能力，如文件系统和网络的访问，有活跃的贡献者社区管理和第三方丰富的包支持。
+ 摆脱浏览器的沙盒机制，可以访问操作系统层面的东西。
+ 前端人员能在不学习其他语言的情况下，快速构建跨平台，带来统一的用户体验

文件结构
----------------------------------------
+ 含有resources目录，包含一个app.asar文件。
+ app.asar是项目源码的归档文件。
+ exe文件是程序的启动文件。

程序结构
----------------------------------------
+ 主进程
    - 特点
        + 处理原生应用逻辑，是一个node.js进程。
        + 每个Electron应用有且只有一个主进程，作为应用程序的入口点，即main脚本（package.json中main节点指定）的进程。
    - 职责
        + 创建渲染进程(可多个)
        + 控制应用生命周期 (启动、退出app以及对app的一些事件监听)
        + 调用系统底层功能、调用原生资源
    - 调用接口
        + NodeJS api
        + Electron提供的主进程api(包括一些系统功能和Electron附加功能)
+ 渲染进程
    - 特点
        + 由electron的BrowserWindow模块来进行创建和销毁，它可以加载web页面。
        + 渲染进程就是一个浏览器窗口，运行在各自的单个线程。
        + 渲染进程中执行的代码可以访问node的所有API,利用这个特性可以使用原生模块，实现与底层系统的交互。
        + 渲染器进程之间是相互隔离的不能够直接互相通信，并且不允许他们直接访问操作系统级别的API。
        + 要先与主进程进行通信，再由主进程进行转发或者由主进程访问安全级别API再返回。
    - 职责
        + 用HTML和CSS渲染界面
        + 用JS做界面交互
    - 可调用接口
        + DOM API
        + NodeJS API
        + Electron提供的渲染进程API
+ 进程通信
    + IPC通信
    + remote通信

|electron1|
|electron2|

.. |electron1| image:: ../../../images/electron1.webp
.. |electron2| image:: ../../../images/electron2.png