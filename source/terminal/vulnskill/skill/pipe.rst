管道漏洞
=====================================

概念
-------------------------------------
- 分类
    + 匿名管道​​
        用于有亲缘关系的进程（如父子进程）。在命令行中， command1 | command2就是匿名管道。
    + 命名管道（FIFO）​​
        提供一个文件系统路径，允许无亲缘关系的进程通过该路径进行通信。例如，在Linux中通过 mkfifo命令创建，在Windows中通过 CreateNamedPipeAPI创建。
- 通信模式​​
    + 数据像水流一样，没有明确的报文边界。程序需要自己定义协议（如使用换行符 \n分隔）。
    + 数据以一条条完整的“消息”为单位进行传输，有边界。

攻击面
-------------------------------------
- 命令注入
    + 场景
        一个进程（A）从管道读取数据，并将其直接拼接成命令行，调用另一个程序（B）。
    + 漏洞
        如果攻击者能控制管道中输入的数据，可以注入如 ; rm -rf /、| malicious_cmd等分隔符，执行任意命令。
- 格式字符串漏洞
    + 场景
        接收进程使用类似 printf(data)而不是 printf("%s", data)的方式直接处理管道数据。
    + 漏洞
        如果数据中包含 %s、%n等格式化字符，可能导致内存读取或写入，进而实现信息泄露或代码执行。
- 缓冲区溢出
    + 场景​​
        接收进程使用不安全的函数（如 gets, strcpy, scanf）将管道数据读入固定大小的缓冲区。
    + 漏洞​​
        发送超过缓冲区大小的数据，可覆盖相邻的内存（如函数返回地址），劫持程序控制流。
- 反序列化漏洞
    ​+ 场景​​
        进程通过管道传输序列化后的对象（如Python的pickle、JSON、XML、自定义二进制协议）。
    ​​+ 漏洞​​
        接收方盲目反序列化不可信数据。攻击者可构造恶意序列化数据，在反序列化过程中触发远程代码执行（RCE）。
- 逻辑错误与竞争条件
    + 场景​​
        程序对管道的读写状态判断不当。
    + 漏洞​​
        ​时间差攻击（TOCTOU）​​：程序先检查管道数据是否满足条件（如“是否为admin”），然后再读取处理。攻击者可以在检查后、处理前，通过另一个进程快速将数据替换为恶意内容。
        状态混乱​​：未正确处理管道关闭、超时等情况，导致程序进入非预期状态。
- 权限提升
    + 场景​​
        一个高权限进程（如root/System）通过管道与低权限进程通信。
    + 漏洞​​
        如果高权限进程盲目信任低权限进程发送的数据，并依此执行危险操作，低权限攻击者就可能利用此漏洞提升自己的权限。

挖掘思路
-------------------------------------
- 静态分析
    + 关键函数
        + CreatePipe, CreateNamedPipe
        + ConnectNamedPipe​​（服务端）
        + DisconnectNamedPipe​​（服务端）
        + ImpersonateNamedPipeClient​​（服务端）
        + ​ReadFile/WriteFile
        + PeekNamedPipe
        + SetNamedPipeHandleState​​
        + GetNamedPipeInfo​​
- 动态分析
    + Process Monitor​​识别进程打开的管道名
    + 使用APIMonitor监控进程的读写操作
- 数据流分析
    + 定位交互点，识别写入端和读取端。
        ::
        
            使用APIMonitor监控，当关闭服务或者进程时，查看DisconnectNamedPipe是谁调用的
            谁调用的，谁就是服务端
    + 拦截与修改
- 注意事项
    + 服务端管道创建时会指定连接的数量
- fuzz