shell
========================================

webshell升级为交互式shell
----------------------------------------

为什么需要交互式shell？
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 | Webshell 里经常会看到一些 命令执行, 虚拟终端 之类的可以执行系统命令的功能，原理就是通过脚本语言自身提供的 system, popen, shell_exec 之类的函数来完成执行命令的目的。这种方式不支持上下文，并且在面对一些需要用户交互的命令时，就显得很鸡肋了。

 | 比如说passwd命令:
 | - root@localhost:/# passwd root
 | - Enter new UNIX password: [这里需要用户按下键盘]
 | - Retype new UNIX password: [这里需要用户按下键盘]

反弹shell
----------------------------------------

什么是反弹shell？
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
反弹shell（reverse shell），就是控制端监听在某TCP/UDP端口，被控端发起请求到该端口，并将其命令行的输入输出转到控制端。reverse shell与telnet，ssh等标准shell对应，本质上是网络概念的客户端与服务端的角色反转。

为什么需要反弹shell？
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
通常用于被控端因防火墙受限、权限不足、端口被占用等情形。
举例：假设我们攻击了一台机器，打开了该机器的一个端口，攻击者在自己的机器去连接目标机器（目标ip：目标机器端口），这是比较常规的形式，我们叫做正向连接。远程桌面、web服务、ssh、telnet等等都是正向连接。那么什么情况下正向连接不能用了呢？

- 如下情况：
	- 1.某客户机中了你的网马，但是它在局域网内，你直接连接不了。
	- 2.目标机器的ip动态改变，你不能持续控制。
	- 3.由于防火墙等限制，对方机器只能发送请求，不能接收请求。
	- 4.对于病毒，木马，受害者什么时候能中招，对方的网络环境是什么样的，什么时候开关机等情况都是未知的，所以建立一个服务端让恶意程序主动连接，才是上策。

	那么反弹就很好理解了，攻击者指定服务端，受害者主机主动连接攻击者的服务端程序，就叫反弹连接。

shell升级为meterpreter
-----------------------------------------
web_delivery模块

